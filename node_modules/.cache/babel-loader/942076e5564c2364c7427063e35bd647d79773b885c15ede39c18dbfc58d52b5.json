{"ast":null,"code":"var _jsxFileName = \"/Users/user/my-ts-react-app/src/GrapesJSCounter.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport grapesjs from 'grapesjs';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GrapesJSCounter = () => {\n  _s();\n  useEffect(() => {\n    const editor = grapesjs.init({\n      container: '#gjs',\n      components: '<div class=\"counter\">0</div>',\n      style: '.counter { font-size: 24px; }'\n    });\n\n    // Update GrapeJS content when the count changes\n    const updateCounter = count => {\n      const counterComponent = editor.DomComponents.getWrapper().find('.counter');\n      if (counterComponent.length > 0) {\n        // Access the first (and only) found component\n        const component = counterComponent[0];\n\n        // Set the attributes on the component\n        component.setAttributes({\n          'data-count': count\n        });\n        component.set('content', count.toString());\n\n        // Render the component\n        component.view.render();\n      }\n    };\n\n    // Subscribe to count changes\n    // You can replace this with your state management system\n    let count = 0;\n    const interval = setInterval(() => {\n      count++;\n      updateCounter(count);\n    }, 1000);\n    return () => {\n      clearInterval(interval);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"GrapeJS Counter\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"gjs\",\n      style: {\n        height: '200px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n_s(GrapesJSCounter, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = GrapesJSCounter;\nexport default GrapesJSCounter;\nvar _c;\n$RefreshReg$(_c, \"GrapesJSCounter\");","map":{"version":3,"names":["React","useEffect","grapesjs","jsxDEV","_jsxDEV","GrapesJSCounter","_s","editor","init","container","components","style","updateCounter","count","counterComponent","DomComponents","getWrapper","find","length","component","setAttributes","set","toString","view","render","interval","setInterval","clearInterval","children","fileName","_jsxFileName","lineNumber","columnNumber","id","height","_c","$RefreshReg$"],"sources":["/Users/user/my-ts-react-app/src/GrapesJSCounter.tsx"],"sourcesContent":["import React, { useEffect } from 'react';\nimport grapesjs from 'grapesjs';\n\nconst GrapesJSCounter: React.FC = () => {\n  useEffect(() => {\n    const editor = grapesjs.init({\n      container: '#gjs',\n      components: '<div class=\"counter\">0</div>',\n      style: '.counter { font-size: 24px; }',\n    });\n\n    // Update GrapeJS content when the count changes\n    const updateCounter = (count: number) => {\n      const counterComponent = editor.DomComponents.getWrapper().find('.counter');\n      if (counterComponent.length > 0) {\n        // Access the first (and only) found component\n        const component = counterComponent[0];\n        \n        // Set the attributes on the component\n        component.setAttributes({ 'data-count': count });\n        component.set('content', count.toString());\n        \n        // Render the component\n        component.view.render();\n      }\n    };\n\n    // Subscribe to count changes\n    // You can replace this with your state management system\n    let count = 0;\n    const interval = setInterval(() => {\n      count++;\n      updateCounter(count);\n    }, 1000);\n\n    return () => {\n      clearInterval(interval);\n    };\n  }, []);\n\n  return (\n    <div>\n      <h2>GrapeJS Counter</h2>\n      <div id=\"gjs\" style={{ height: '200px' }} />\n    </div>\n  );\n};\n\nexport default GrapesJSCounter;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAOC,QAAQ,MAAM,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhC,MAAMC,eAAyB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtCL,SAAS,CAAC,MAAM;IACd,MAAMM,MAAM,GAAGL,QAAQ,CAACM,IAAI,CAAC;MAC3BC,SAAS,EAAE,MAAM;MACjBC,UAAU,EAAE,8BAA8B;MAC1CC,KAAK,EAAE;IACT,CAAC,CAAC;;IAEF;IACA,MAAMC,aAAa,GAAIC,KAAa,IAAK;MACvC,MAAMC,gBAAgB,GAAGP,MAAM,CAACQ,aAAa,CAACC,UAAU,CAAC,CAAC,CAACC,IAAI,CAAC,UAAU,CAAC;MAC3E,IAAIH,gBAAgB,CAACI,MAAM,GAAG,CAAC,EAAE;QAC/B;QACA,MAAMC,SAAS,GAAGL,gBAAgB,CAAC,CAAC,CAAC;;QAErC;QACAK,SAAS,CAACC,aAAa,CAAC;UAAE,YAAY,EAAEP;QAAM,CAAC,CAAC;QAChDM,SAAS,CAACE,GAAG,CAAC,SAAS,EAAER,KAAK,CAACS,QAAQ,CAAC,CAAC,CAAC;;QAE1C;QACAH,SAAS,CAACI,IAAI,CAACC,MAAM,CAAC,CAAC;MACzB;IACF,CAAC;;IAED;IACA;IACA,IAAIX,KAAK,GAAG,CAAC;IACb,MAAMY,QAAQ,GAAGC,WAAW,CAAC,MAAM;MACjCb,KAAK,EAAE;MACPD,aAAa,CAACC,KAAK,CAAC;IACtB,CAAC,EAAE,IAAI,CAAC;IAER,OAAO,MAAM;MACXc,aAAa,CAACF,QAAQ,CAAC;IACzB,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,oBACErB,OAAA;IAAAwB,QAAA,gBACExB,OAAA;MAAAwB,QAAA,EAAI;IAAe;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACxB5B,OAAA;MAAK6B,EAAE,EAAC,KAAK;MAACtB,KAAK,EAAE;QAAEuB,MAAM,EAAE;MAAQ;IAAE;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACzC,CAAC;AAEV,CAAC;AAAC1B,EAAA,CA3CID,eAAyB;AAAA8B,EAAA,GAAzB9B,eAAyB;AA6C/B,eAAeA,eAAe;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}